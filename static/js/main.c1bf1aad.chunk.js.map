{"version":3,"sources":["logo.svg","components/PaymentRequest.js","components/PaymentElement.js","components/PaymentCard.js","components/StripeProviderHolder.js","App.js","reportWebVitals.js","index.js"],"names":["PaymentRequestForm","props","handleComplete","token","console","log","paymentRequest","stripe","country","currency","total","label","amount","totalPrice","on","complete","data","canMakePayment","then","result","setState","state","this","className","style","paymentRequestButton","theme","height","href","React","Component","injectStripe","PaymentElement","PaymentCard","useState","setTotalPrice","PaymentRequest","onClick","StripeProviderHolder","apiKey","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAAe,I,+DCITA,E,kDACF,WAAYC,GAAQ,IAAD,uBACf,cAAMA,IA+BVC,eAAiB,SAACC,GACdC,QAAQC,IAAI,0BAA2BF,IA5BvC,IAAMG,EAAiBL,EAAMM,OAAOD,eAAe,CAC/CE,QAAS,KACTC,SAAU,MACVC,MAAO,CACHC,MAAO,aACPC,OAAQX,EAAMY,cAVP,OAcfP,EAAeQ,GAAG,SAAS,YAAmC,IAAhCC,EAA+B,EAA/BA,SAAUZ,EAAqB,EAArBA,MAAUa,EAAW,oCACzDZ,QAAQC,IAAI,0BAA2BF,GACvCC,QAAQC,IAAI,kCAAmCW,GAC/C,EAAKd,iBACLa,EAAS,cAGbT,EAAeW,iBAAiBC,MAAK,SAACC,GAClC,EAAKC,SAAS,CAAEH,iBAAkBE,OAGtC,EAAKE,MAAQ,CACTJ,gBAAgB,EAChBX,kBA3BW,E,0CAoCnB,WACI,OAAOgB,KAAKD,MAAMJ,eACd,8BACI,cAAC,8BAAD,CACIX,eAAgBgB,KAAKD,MAAMf,eAC3BiB,UAAU,uBACVC,MAAO,CAGHC,qBAAsB,CAClBC,MAAO,OACPC,OAAQ,aAMxB,iMAGqC,mBAAGC,KAAK,4EAAR,oCAHrC,0D,GAtDqBC,IAAMC,WA8DxBC,yBAAa/B,GC/DfgC,EAAb,4JACI,WACI,OACI,cAAC,cAAD,QAHZ,GAAoCH,IAAMC,WAQ3BC,yBAAaC,GCcbC,EAlBK,WAClB,MAAkCC,mBAAS,GAA3C,mBAAKrB,EAAL,KAAiBsB,EAAjB,KAGE,OACE,gCACE,cAAC,WAAD,UACE,cAAC,EAAD,MAEF,cAAC,WAAD,UACE,cAACC,EAAD,CAAgBvB,WAAYA,MAE9B,wBAAQwB,QAAS,kBAAMF,EAActB,MAArC,0BCNOyB,E,4JARX,WACI,OACI,cAAC,iBAAD,CAAgBC,OAAO,8GAAvB,SACI,cAAC,EAAD,U,GAJmBV,IAAMC,WCU1BU,MAVf,WAEE,OACE,gCACE,qDACA,cAAC,EAAD,QCGSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c1bf1aad.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport { PaymentRequestButtonElement } from 'react-stripe-elements';\nimport { injectStripe } from 'react-stripe-elements';\n\nclass PaymentRequestForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // For full documentation of the available paymentRequest options, see:\n        // https://stripe.com/docs/stripe.js#the-payment-request-object\n        const paymentRequest = props.stripe.paymentRequest({\n            country: 'US',\n            currency: 'usd',\n            total: {\n                label: 'Demo total',\n                amount: props.totalPrice,\n            },\n        });\n\n        paymentRequest.on('token', ({ complete, token, ...data }) => {\n            console.log('Received Stripe token: ', token);\n            console.log('Received customer information: ', data);\n            this.handleComplete()\n            complete('success')\n        });\n\n        paymentRequest.canMakePayment().then((result) => {\n            this.setState({ canMakePayment: !!result });\n        });\n\n        this.state = {\n            canMakePayment: false,\n            paymentRequest,\n        };\n    }\n\n            \n    handleComplete = (token) => {\n        console.log(\"hey hey we're the token\", token)\n    }\n\n    render() {\n        return this.state.canMakePayment ? (\n            <div>\n                <PaymentRequestButtonElement\n                    paymentRequest={this.state.paymentRequest}\n                    className=\"PaymentRequestButton\"\n                    style={{\n                        // For more details on how to style the Payment Request Button, see:\n                        // https://stripe.com/docs/elements/payment-request-button#styling-the-element\n                        paymentRequestButton: {\n                            theme: 'dark',\n                            height: '40px',\n                        },\n                    }}\n                />\n            </div>\n        ) : (\n            <p>\n                Either your browser does not support the Payment Request\n                API or you do not have a saved payment method. To try out the Payment\n                Request Button, switch to one of <a href=\"https://stripe.com/docs/stripe-js/elements/payment-request-button#testing\">the supported browsers</a>, and make sure you have a saved payment method.\n            </p>\n        );\n    }\n}\nexport default injectStripe(PaymentRequestForm);","import React from 'react'\nimport {CardElement, injectStripe, ReactStripeElements} from 'react-stripe-elements'\n\nexport class PaymentElement extends React.Component {\n    render() {\n        return (\n            <CardElement />\n        )\n    }\n}\n\nexport default injectStripe(PaymentElement);","// MyStoreCheckout.js\nimport React, {useState} from 'react';\nimport {Elements} from 'react-stripe-elements';\n\nimport PaymentRequest from './PaymentRequest';\nimport PaymentElement from './PaymentElement'\n\nconst PaymentCard = () => {\n  let [totalPrice, setTotalPrice] = useState(1)\n\n\n    return (\n      <div>\n        <Elements>\n          <PaymentElement />\n        </Elements>\n        <Elements>\n          <PaymentRequest totalPrice={totalPrice}/>\n        </Elements>\n        <button onClick={() => setTotalPrice(totalPrice++)}>Click me</button>\n      </div>\n    );\n\n}\n\nexport default PaymentCard;","import React from 'react'\nimport { StripeProvider } from 'react-stripe-elements';\nimport PaymentCard from './PaymentCard';\n\nclass StripeProviderHolder extends React.Component {\n    render() {\n        return (\n            <StripeProvider apiKey=\"pk_test_51IlHEuDwnViOHl4M4992ZPFENwM7cSjR9R2b8WJm1zFHjjwsAU5xX5sfSE9BHouSIP8a7VXhSByzHDdBiXitaj3600zwIV4p22\">\n                <PaymentCard />\n            </StripeProvider>\n        );\n    }\n}\nexport default StripeProviderHolder;\n","import logo from './logo.svg';\nimport './App.css';\nimport StripeProviderHolder from './components/StripeProviderHolder';\n\nfunction App() {\n\n  return (\n    <div>\n      <p>is anything working?</p>\n      <StripeProviderHolder />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}