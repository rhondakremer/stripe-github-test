{"version":3,"sources":["logo.svg","components/PaymentRequest.js","components/PaymentElement.js","components/PaymentCard.js","components/StripeProviderHolder.js","App.js","reportWebVitals.js","index.js"],"names":["injectStripe","stripe","totalPrice","useState","canMakePayment","setCanMakePayment","paymentRequest","setPaymentRequest","updatePaymentRequest","useCallback","update","currency","total","label","amount","useEffect","newPaymentRequest","country","requestPayerEmail","requestPayerName","on","handleComplete","then","result","formPaymentRequest","token","console","log","className","style","paymentRequestButton","theme","height","onClick","href","PaymentElement","React","Component","PaymentCard","setTotalPrice","PaymentRequest","StripeProviderHolder","apiKey","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAAe,I,sDCuEAA,0BAnEY,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,WAClC,EAA4CC,oBAAS,GAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAA4CF,mBAAS,MAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KAoBMC,EAAuBC,uBAAY,WACrCH,EAAeI,OAAO,CAClBC,SAAU,MACVC,MAAO,CACHC,MAAO,WACPC,OAAQZ,OAGjB,CAACA,EAAYI,IAEhBS,qBAAU,WACDT,GA7BkB,WACvB,IAAMU,EAAoBf,EAAOK,eAAe,CAC5CW,QAAS,KACTN,SAAU,MACVO,mBAAmB,EACnBC,kBAAkB,EAClBP,MAAO,CACHC,MAAO,WACPC,OAAQZ,KAGhBK,EAAkBS,GAClBA,EAAkBI,GAAG,QAASC,GAC9BL,EAAkBZ,iBAAiBkB,MAAK,SAAAC,GACpClB,IAAoBkB,MAgBpBC,MAIR,IAAMH,EAAiB,SAACI,GACpBC,QAAQC,IAAI,0BAA2BF,IAG3C,OAAOrB,EACH,8BACI,cAAC,8BAAD,CACIE,eAAgBA,EAChBsB,UAAU,uBACVC,MAAO,CAGHC,qBAAsB,CAClBC,MAAO,OACPC,OAAQ,SAGhBC,QAASzB,MAIjB,iMAGqC,mBAAG0B,KAAK,4EAAR,oCAHrC,yDC5DKC,EAAb,4JACI,WACI,OACI,cAAC,cAAD,QAHZ,GAAoCC,IAAMC,WAQ3BrC,yBAAamC,GCebG,EAnBK,WAClB,MAAkCnC,mBAAS,GAA3C,mBAAKD,EAAL,KAAiBqC,EAAjB,KAGE,OACE,gCACE,cAAC,WAAD,UACE,cAAC,EAAD,MAEF,cAAC,WAAD,UACE,cAACC,EAAD,CAAgBtC,WAAYA,MAE9B,wBAAQ+B,QAAS,kBAAMM,EAAcrC,MAArC,sBACA,0EAA6CA,SCPtCuC,E,4JARX,WACI,OACI,cAAC,iBAAD,CAAgBC,OAAO,8GAAvB,SACI,cAAC,EAAD,U,GAJmBN,IAAMC,WCU1BM,MAVf,WAEE,OACE,gCACE,qDACA,cAAC,EAAD,QCGSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.68200a25.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useCallback, useState } from 'react';\nimport { PaymentRequestButtonElement } from 'react-stripe-elements';\nimport { injectStripe } from 'react-stripe-elements';\n\nconst PaymentRequestForm = ({ stripe, totalPrice }) => {\n    const [canMakePayment, setCanMakePayment] = useState(false)\n    const [paymentRequest, setPaymentRequest] = useState(null)\n\n    const formPaymentRequest = () => {\n        const newPaymentRequest = stripe.paymentRequest({\n            country: 'US',\n            currency: 'usd',\n            requestPayerEmail: true,\n            requestPayerName: true,\n            total: {\n                label: 'hey test',\n                amount: totalPrice,\n            },\n        })\n        setPaymentRequest(newPaymentRequest)\n        newPaymentRequest.on('token', handleComplete)\n        newPaymentRequest.canMakePayment().then(result => {\n            setCanMakePayment(!!result)\n        })\n    }\n\n    const updatePaymentRequest = useCallback(() => {\n        paymentRequest.update({\n            currency: 'usd',\n            total: {\n                label: 'hey test',\n                amount: totalPrice,\n            },\n        })\n    }, [totalPrice, paymentRequest])\n\n    useEffect(() => {\n        if (!paymentRequest) {\n            formPaymentRequest()\n        }\n    })\n\n    const handleComplete = (token) => {\n        console.log(\"hey hey we're the token\", token)\n    }\n\n    return canMakePayment ? (\n        <div>\n            <PaymentRequestButtonElement\n                paymentRequest={paymentRequest}\n                className=\"PaymentRequestButton\"\n                style={{\n                    // For more details on how to style the Payment Request Button, see:\n                    // https://stripe.com/docs/elements/payment-request-button#styling-the-element\n                    paymentRequestButton: {\n                        theme: 'dark',\n                        height: '40px',\n                    },\n                }}\n                onClick={updatePaymentRequest}\n            />\n        </div>\n    ) : (\n        <p>\n            Either your browser does not support the Payment Request\n            API or you do not have a saved payment method. To try out the Payment\n            Request Button, switch to one of <a href=\"https://stripe.com/docs/stripe-js/elements/payment-request-button#testing\">the supported browsers</a>, and make sure you have a saved payment method.\n        </p>\n    );\n}\n\nexport default injectStripe(PaymentRequestForm);","import React from 'react'\nimport {CardElement, injectStripe, ReactStripeElements} from 'react-stripe-elements'\n\nexport class PaymentElement extends React.Component {\n    render() {\n        return (\n            <CardElement />\n        )\n    }\n}\n\nexport default injectStripe(PaymentElement);","// MyStoreCheckout.js\nimport React, {useState} from 'react';\nimport {Elements} from 'react-stripe-elements';\n\nimport PaymentRequest from './PaymentRequest';\nimport PaymentElement from './PaymentElement'\n\nconst PaymentCard = () => {\n  let [totalPrice, setTotalPrice] = useState(1)\n\n\n    return (\n      <div>\n        <Elements>\n          <PaymentElement />\n        </Elements>\n        <Elements>\n          <PaymentRequest totalPrice={totalPrice}/>\n        </Elements>\n        <button onClick={() => setTotalPrice(totalPrice++)}>Click me</button>\n        <p>total price is there was a changey change{totalPrice}</p>\n      </div>\n    );\n\n}\n\nexport default PaymentCard;","import React from 'react'\nimport { StripeProvider } from 'react-stripe-elements';\nimport PaymentCard from './PaymentCard';\n\nclass StripeProviderHolder extends React.Component {\n    render() {\n        return (\n            <StripeProvider apiKey=\"pk_test_51IlHEuDwnViOHl4M4992ZPFENwM7cSjR9R2b8WJm1zFHjjwsAU5xX5sfSE9BHouSIP8a7VXhSByzHDdBiXitaj3600zwIV4p22\">\n                <PaymentCard />\n            </StripeProvider>\n        );\n    }\n}\nexport default StripeProviderHolder;\n","import logo from './logo.svg';\nimport './App.css';\nimport StripeProviderHolder from './components/StripeProviderHolder';\n\nfunction App() {\n\n  return (\n    <div>\n      <p>is anything working?</p>\n      <StripeProviderHolder />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}